---
- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ jenkins_repos_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ jenkins_repos_key_url }}"
  when: jenkins_repo_key_url is not defined

- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: "{{ jenkins_pkgs_url }}"
  when: jenkins_pkg_url is not defined

- name: Set facts for init changes
  set_fact:
    jenkins_init_changes:
      - option: "JENKINS_ARGS"
        value: "--prefix={{ jenkins_url_prefix }}"
      - option: "{{ jenkins_java_options_env_var }}"
        value: "{{ jenkins_java_options }}"

# Setup/install tasks.
#- include: setup-RedHat.yml
#  when: ansible_os_family == 'RedHat'

        #- include: setup-Debian.yml
        #  when: ansible_os_family == 'Debian'
- name: Ensure dependencies are installed.
  apt:
    name:
      - curl
      - apt-transport-https
    state: latest

- name: Add Jenkins apt repository key.
  apt_key:
    url: "{{ jenkins_repo_key_url }}"
    state: present

- name: Add Jenkins apt repository.
  apt_repository:
    repo: "{{ jenkins_repo_url }}"
    state: present
    update_cache: yes

- name: Download and install Jenkins .
  shell: wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add - ;deb https://pkg.jenkins.io/debian binary/;sudo apt-get update;sudo apt-get install jenkins -y
  ignore_errors: yes

 
  #get_url:
          #url: "{{ jenkins_pkg_url }}/jenkins_{{ jenkins_version }}_all.deb"
    #dest: "/tmp/jenkins.deb"
    #  when: jenkins_version is defined

  #- name: Check if we downloaded a specific version of Jenkins.
  #stat:
  #  path: "/tmp/jenkins.deb"
  #register: specific_version

  #- name: Install our specific version of Jenkins.
  #apt:
  # deb: "/tmp/jenkins.deb"
  # state: present
  #when: specific_version.stat.exists
  #notify: configure default users

- name: Validate Jenkins is installed and register package name.
  apt:
    name: jenkins
    state: present
  notify: configure default users

# Configure Jenkins init settings.
- include: settings.yml

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  ignore_errors: yes


- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent

# Update Jenkins and install configured plugins.
#- include: plugins.yml
